name: Pull Request Workflow

on:
  pull_request:
    branches:
      - main
      - develop
      - 'dev/**'
      - 'test/**'
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '.github/workflows/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: read

jobs:
  security-scan:
    name: 'Security Scan'
    runs-on: macOS-latest
    outputs:
      checkov_status: ${{ steps.checkov.outcome }}
      checkov_failed_checks: ${{ steps.extract_results.outputs.failed_checks }}
      checkov_passed_checks: ${{ steps.extract_results.outputs.passed_checks }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Render terraform docs
        uses: terraform-docs/gh-actions@v1.4.0
        with:
          working-dir: .
          config-file: .terraform-docs.yml
          fail-on-diff: true       
      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          soft_fail: true
          output_format: cli,sarif
          output_file_path: console,results.sarif
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        
        # Results are generated only on a success or failure
        # this is required since GitHub by default won't run the next step
        # when the previous one has failed. Security checks that do not pass will 'fail'.
        # An alternative is to add `continue-on-error: true` to the previous step
        # Or 'soft_fail: true' to checkov.
        if: success() || failure()
        with:
          sarif_file: results.sarif   

      - name: Extract Checkov Results
        id: extract_results
        if: always()
        run: |
          if [[ "${{ steps.checkov.outputs.results }}" =~ "failed checks: ([0-9]+)" ]]; then
            echo "failed_checks=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "failed_checks=0" >> $GITHUB_OUTPUT
          fi
          
          if [[ "${{ steps.checkov.outputs.results }}" =~ "passed checks: ([0-9]+)" ]]; then
            echo "passed_checks=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "passed_checks=0" >> $GITHUB_OUTPUT
          fi

      - name: Post Checkov Results
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Checkov Security Scan Results üîç
            
            ${{ steps.checkov.outputs.results }}
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-tests:
    name: 'Terraform Tests'
    environment: dev
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      test_status: ${{ steps.test.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.S3_KEY_PREFIX }}/dev/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Run Terraform Tests
        id: test
        run: terraform test
        continue-on-error: true

      - name: Post Test Results
        uses: actions/github-script@v6
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform Tests Results ‚úÖ
            
            Status: \`${{ steps.test.outcome }}\`
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-plan:
    name: 'Terraform Plan'
    environment: dev
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-tests]
    outputs:
      format_status: ${{ steps.fmt.outcome }}
      init_status: ${{ steps.init.outcome }}
      validate_status: ${{ steps.validate.outcome }}
      plan_status: ${{ steps.plan.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.S3_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.S3_KEY_PREFIX }}/${{ inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=environments/${{ inputs.environment  }}/terraform.tfvars -no-color -input=false -out=tfplan.json
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: always()
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          FORMAT_RESULT: "${{ steps.fmt.outcome }}"
          INIT_RESULT: "${{ steps.init.outcome }}"
          VALIDATE_RESULT: "${{ steps.validate.outcome }}"
          PLAN_RESULT: "${{ steps.plan.outcome }}"
          PR_ENV: "${{ inputs.environment  }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `### Terraform Plan for \`${process.env.PR_ENV}\` Environment üìñ
            
            #### Terraform Format and Style üñå\`${process.env.FORMAT_RESULT}\`
            #### Terraform Initialization ‚öôÔ∏è\`${process.env.INIT_RESULT}\`
            #### Terraform Validation ü§ñ\`${process.env.VALIDATE_RESULT}\`
            #### Terraform Plan üìñ\`${{steps.plan.outcome}}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
  summary-report:
    name: 'Summary Report'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-tests, terraform-plan]
    if: always()
    steps:
      - name: Create Summary Table
        uses: actions/github-script@v6
        if: always()
        env:
          CHECKOV_STATUS: ${{ needs.security-scan.outputs.checkov_status }}
          CHECKOV_FAILED: ${{ needs.security-scan.outputs.checkov_failed_checks }}
          CHECKOV_PASSED: ${{ needs.security-scan.outputs.checkov_passed_checks }}
          TEST_STATUS: ${{ needs.terraform-tests.outputs.test_status }}
          FORMAT_STATUS: ${{ needs.terraform-plan.outputs.format_status }}
          INIT_STATUS: ${{ needs.terraform-plan.outputs.init_status }}
          VALIDATE_STATUS: ${{ needs.terraform-plan.outputs.validate_status }}
          PLAN_STATUS: ${{ needs.terraform-plan.outputs.plan_status }}
        with:
          script: |
            // Create a status emoji based on the outcome
            const getStatusEmoji = (status) => {
              if (!status) return '‚ùì';
              switch(status.toLowerCase()) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚ö†Ô∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };
            
            // Create a summary table
            const summary = `## Pull Request Workflow Summary
            
            | Check | Status | Details |
            | ----- | ------ | ------- |
            | Checkov Security Scan | ${getStatusEmoji(process.env.CHECKOV_STATUS)} | Passed: ${process.env.CHECKOV_PASSED}, Failed: ${process.env.CHECKOV_FAILED} |
            | Terraform Tests | ${getStatusEmoji(process.env.TEST_STATUS)} | ${process.env.TEST_STATUS || 'N/A'} |
            | Terraform Format | ${getStatusEmoji(process.env.FORMAT_STATUS)} | ${process.env.FORMAT_STATUS || 'N/A'} |
            | Terraform Init | ${getStatusEmoji(process.env.INIT_STATUS)} | ${process.env.INIT_STATUS || 'N/A'} |
            | Terraform Validate | ${getStatusEmoji(process.env.VALIDATE_STATUS)} | ${process.env.VALIDATE_STATUS || 'N/A'} |
            | Terraform Plan | ${getStatusEmoji(process.env.PLAN_STATUS)} | ${process.env.PLAN_STATUS || 'N/A'} |
            
            *Generated at: ${new Date().toISOString()}*
            `;
            
            // Write to the job summary
            await core.summary
              .addRaw(summary)
              .write();
              
            // Also post as a comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });